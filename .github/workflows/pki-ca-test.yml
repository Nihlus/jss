name: Testing PKI CA

on: workflow_call

env:
  NAMESPACE: ${{ vars.REGISTRY_NAMESPACE || 'dogtagpki' }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/jss
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Retrieve JSS images
        uses: actions/cache@v4
        with:
          key: jss-images-${{ github.sha }}
          path: jss-images.tar

      - name: Load JSS images
        run: docker load --input jss-images.tar

      - name: Create network
        run: docker network create example

      - name: Set up server container
        run: |
          tests/bin/runner-init.sh pki
        env:
          HOSTNAME: pki.example.com

      - name: Connect server container to network
        run: docker network connect example pki --alias pki.example.com --alias server.example.com

      - name: Set up client container
        run: |
          tests/bin/runner-init.sh client
        env:
          HOSTNAME: client.example.com

      - name: Connect client container to network
        run: docker network connect example client --alias client.example.com

      - name: Import LDAP SDK packages
        run: |
          docker create --name=ldapjdk-dist quay.io/$NAMESPACE/ldapjdk-dist:latest
          docker cp ldapjdk-dist:/root/RPMS/. /tmp/RPMS/
          docker rm -f ldapjdk-dist

      - name: Import PKI packages
        run: |
          docker create --name=pki-dist quay.io/$NAMESPACE/pki-dist:latest
          docker cp pki-dist:/root/RPMS/. /tmp/RPMS/
          docker rm -f pki-dist

      - name: Install packages
        run: |
          # install packages on server
          docker exec pki dnf install -y 389-ds-base
          docker cp /tmp/RPMS/. pki:/root/RPMS/
          docker exec pki bash -c "dnf localinstall -y /root/RPMS/*"

          # install packages on client
          docker cp /tmp/RPMS/. client:/root/RPMS/
          docker exec client bash -c "dnf localinstall -y /root/RPMS/*"

      - name: Install DS
        run: docker exec pki ${SHARED}/tests/bin/ds-create.sh

      - name: Install CA
        run: |
          docker exec pki pkispawn \
              -f /usr/share/pki/server/examples/installation/ca.cfg \
              -s CA \
              -v

          # set buffer size to 0 so that revocation takes effect immediately
          docker exec pki pki-server ca-config-set auths.revocationChecking.bufferSize 0

          # enable signed audit log
          docker exec pki pki-server ca-config-set log.instance.SignedAudit.logSigning true

          # restart PKI server
          docker exec pki pki-server restart --wait

      - name: Run PKI healthcheck
        run: docker exec pki pki-healthcheck --debug

      - name: Initialize PKI client
        run: |
          docker exec pki pki-server cert-export ca_signing --cert-file ca_signing.crt

          docker exec pki pki nss-cert-import \
              --cert ca_signing.crt \
              --trust CT,C,C \
              ca_signing

          docker exec pki pki info

      - name: Check CA certs
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-signing-cert.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-subsystem-cert.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-certs.sh

      - name: Check CA admin
        run: |
          docker exec pki pki pkcs12-import \
              --pkcs12 /root/.dogtag/pki-tomcat/ca_admin_cert.p12 \
              --pkcs12-password Secret.123
          docker exec pki pki -n caadmin ca-user-show caadmin

      - name: Check CA agent
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-revoke.sh
          docker exec pki /usr/share/pki/tests/ca/bin/ca-agent-cert-unrevoke.sh

      - name: Check CA auditor
        run: |
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-auditor-create.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-auditor-cert.sh
          docker exec pki /usr/share/pki/tests/ca/bin/test-ca-auditor-logs.sh

      - name: Check client with untrusted server cert
        run: |
          # run client but don't trust the cert
          echo n | docker exec -i client pki -U https://pki.example.com:8443 info \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # check stdout
          cat > expected << EOF
            Server URL: https://pki.example.com:8443
          EOF

          diff expected stdout

          # check stderr
          cat > expected << EOF
          WARNING: UNTRUSTED ISSUER encountered on 'CN=pki.example.com,OU=pki-tomcat,O=EXAMPLE' indicates a non-trusted CA cert 'CN=CA Signing Certificate,OU=pki-tomcat,O=EXAMPLE'
          Trust this certificate (y/N)? SEVERE: FATAL: SSL alert sent: BAD_CERTIFICATE
          IOException: Unable to write to socket: Failed to write to socket: (-5987) Invalid function argument.
          EOF

          diff expected stderr

          # the cert should not be stored
          docker exec client pki nss-cert-find | tee output

          diff /dev/null output

      - name: Check client with untrusted server cert with wrong hostname
        run: |
          # run client with wrong hostname
          echo n | docker exec -i client pki -U https://server.example.com:8443 info \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # check stdout
          cat > expected << EOF
            Server URL: https://server.example.com:8443
          EOF

          diff expected stdout

          # check stderr
          cat > expected << EOF
          WARNING: BAD_CERT_DOMAIN encountered on 'CN=pki.example.com,OU=pki-tomcat,O=EXAMPLE' indicates a common-name mismatch
          WARNING: UNTRUSTED ISSUER encountered on 'CN=pki.example.com,OU=pki-tomcat,O=EXAMPLE' indicates a non-trusted CA cert 'CN=CA Signing Certificate,OU=pki-tomcat,O=EXAMPLE'
          Trust this certificate (y/N)? SEVERE: FATAL: SSL alert sent: BAD_CERTIFICATE
          IOException: Unable to write to socket: Failed to write to socket: (-12276) Unable to communicate securely with peer: requested domain name does not match the server's certificate.
          EOF

          diff expected stderr

      - name: Check client with newly trusted server cert
        run: |
          # run client and trust the cert
          echo y | docker exec -i client pki -U https://pki.example.com:8443 info \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # check stdout
          cat > expected << EOF
            Server URL: https://pki.example.com:8443
            Server Name: Dogtag Certificate System
            Server Version: 11.6.0
          EOF

          diff expected stdout

          # check stderr
          cat > expected << EOF
          WARNING: UNTRUSTED ISSUER encountered on 'CN=pki.example.com,OU=pki-tomcat,O=EXAMPLE' indicates a non-trusted CA cert 'CN=CA Signing Certificate,OU=pki-tomcat,O=EXAMPLE'
          Trust this certificate (y/N)?
          EOF

          # remove trailing whitespace
          sed -i 's/ *$//' stderr

          # append end of line
          echo >> stderr

          diff expected stderr

          # the cert should be stored and trusted
          docker exec client pki nss-cert-find | tee output

          sed -i \
              -e '/^ *Serial Number:/d' \
              -e '/^ *Not Valid Before:/d' \
              -e '/^ *Not Valid After:/d' \
              output

          cat > expected << EOF
            Nickname: CN=pki.example.com,OU=pki-tomcat,O=EXAMPLE
            Subject DN: CN=pki.example.com,OU=pki-tomcat,O=EXAMPLE
            Issuer DN: CN=CA Signing Certificate,OU=pki-tomcat,O=EXAMPLE
            Trust Flags: P,,
          EOF

          diff expected output

      - name: Check client with trusted server cert with wrong hostname
        run: |
          # run client with wrong hostname
          docker exec client pki -U https://server.example.com:8443 info \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # check stdout
          cat > expected << EOF
            Server URL: https://server.example.com:8443
            Server Name: Dogtag Certificate System
            Server Version: 11.6.0
          EOF

          diff expected stdout

          # check stderr
          cat > expected << EOF
          WARNING: BAD_CERT_DOMAIN encountered on 'CN=pki.example.com,OU=pki-tomcat,O=EXAMPLE' indicates a common-name mismatch
          EOF

          diff expected stderr

      - name: Check client with already trusted server cert
        run: |
          # run client with correct hostname
          docker exec client pki -U https://pki.example.com:8443 info \
              > >(tee stdout) 2> >(tee stderr >&2) || true

          # check stdout
          cat > expected << EOF
            Server URL: https://pki.example.com:8443
            Server Name: Dogtag Certificate System
            Server Version: 11.6.0
          EOF

          diff expected stdout

          # check stderr
          diff /dev/null stderr

      - name: Remove CA
        run: docker exec pki pkidestroy -i pki-tomcat -s CA -v

      - name: Remove DS
        run: docker exec pki ${SHARED}/tests/bin/ds-remove.sh

      - name: Check DS server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u dirsrv@localhost.service

      - name: Check PKI server systemd journal
        if: always()
        run: |
          docker exec pki journalctl -x --no-pager -u pki-tomcatd@pki-tomcat.service

      - name: Check CA debug log
        if: always()
        run: |
          docker exec pki find /var/lib/pki/pki-tomcat/logs/ca -name "debug.*" -exec cat {} \;

      - name: Gather artifacts
        if: always()
        run: |
          tests/bin/ds-artifacts-save.sh pki
          tests/bin/pki-artifacts-save.sh pki
        continue-on-error: true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pki-ca-test
          path: /tmp/artifacts
